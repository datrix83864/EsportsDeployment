---
# Deploy iPXE Boot Server
# High School Esports LAN Infrastructure

- name: Deploy iPXE Boot Server
  hosts: ipxe_server
  become: true
  
  vars_files:
    - "{{ config_file | default('../config.yaml') }}"
  
  tasks:
    - name: Display deployment information
      debug:
        msg:
          - "Deploying iPXE Boot Server"
          - "Organization: {{ organization.name }}"
          - "Server IP: {{ network.ipxe_server_ip }}"
          - "DHCP Range: {{ network.dhcp_range_start }} - {{ network.dhcp_range_end }}"
    
    # System preparation
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      tags: [packages]
    
    - name: Install required packages
      apt:
        name:
          - dnsmasq
          - tftpd-hpa
          - nginx
          - wget
          - curl
          - ipxe
          - wimtools
          - syslinux
          - pxelinux
          - rsync
        state: present
      tags: [packages]
    
    # Directory structure
    - name: Create TFTP directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: tftp
        group: tftp
        mode: '0755'
      loop:
        - /srv/tftp
        - /srv/tftp/images
        - /srv/tftp/bios
        - /srv/tftp/efi
      tags: [directories]
    
    - name: Create image directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'
      loop:
        - /srv/images
        - /srv/images/windows11
        - /srv/images/windows11/Boot
        - /srv/images/windows11/sources
      tags: [directories]
    
    - name: Create log directory
      file:
        path: /var/log/ipxe
        state: directory
        owner: root
        group: adm
        mode: '0755'
      tags: [directories]
    
    # Download iPXE boot files
    - name: Check if ipxe.efi exists
      stat:
        path: /srv/tftp/ipxe.efi
      register: ipxe_efi
      tags: [bootfiles]
    
    - name: Download ipxe.efi (UEFI bootloader)
      get_url:
        url: http://boot.ipxe.org/ipxe.efi
        dest: /srv/tftp/ipxe.efi
        owner: tftp
        group: tftp
        mode: '0644'
      when: not ipxe_efi.stat.exists
      tags: [bootfiles]
      ignore_errors: yes
    
    - name: Check if undionly.kpxe exists
      stat:
        path: /srv/tftp/undionly.kpxe
      register: undionly_kpxe
      tags: [bootfiles]
    
    - name: Download undionly.kpxe (BIOS bootloader)
      get_url:
        url: http://boot.ipxe.org/undionly.kpxe
        dest: /srv/tftp/undionly.kpxe
        owner: tftp
        group: tftp
        mode: '0644'
      when: not undionly_kpxe.stat.exists
      tags: [bootfiles]
      ignore_errors: yes
    
    - name: Check if wimboot exists
      stat:
        path: /srv/tftp/wimboot
      register: wimboot
      tags: [bootfiles]
    
    - name: Download wimboot (Windows boot loader)
      get_url:
        url: https://github.com/ipxe/wimboot/releases/latest/download/wimboot
        dest: /srv/tftp/wimboot
        owner: tftp
        group: tftp
        mode: '0755'
      when: not wimboot.stat.exists
      tags: [bootfiles]
      ignore_errors: yes
    
    # Configure TFTP
    - name: Configure TFTP server
      template:
        src: ../../ipxe/config/tftpd-hpa.j2
        dest: /etc/default/tftpd-hpa
        owner: root
        group: root
        mode: '0644'
      notify: restart tftpd-hpa
      tags: [config]
    
    # Configure dnsmasq (DHCP)
    - name: Backup existing dnsmasq.conf
      copy:
        src: /etc/dnsmasq.conf
        dest: "/etc/dnsmasq.conf.backup.{{ ansible_date_time.date }}"
        remote_src: yes
      ignore_errors: yes
      tags: [config]
    
    - name: Deploy dnsmasq configuration
      template:
        src: ../../ipxe/config/dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
        owner: root
        group: root
        mode: '0644'
        validate: 'dnsmasq --test --conf-file=%s'
      notify: restart dnsmasq
      tags: [config]
    
    # Configure nginx
    - name: Backup existing nginx.conf
      copy:
        src: /etc/nginx/nginx.conf
        dest: "/etc/nginx/nginx.conf.backup.{{ ansible_date_time.date }}"
        remote_src: yes
      ignore_errors: yes
      tags: [config]
    
    - name: Deploy nginx configuration
      template:
        src: ../../ipxe/config/nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
        validate: 'nginx -t -c %s'
      notify: restart nginx
      tags: [config]
    
    # Deploy iPXE boot menu
    - name: Deploy iPXE boot menu
      template:
        src: ../../ipxe/config/boot.ipxe.j2
        dest: /srv/tftp/boot.ipxe
        owner: tftp
        group: tftp
        mode: '0644'
      tags: [config]
    
    # Create test boot script
    - name: Create test iPXE script
      copy:
        dest: /srv/tftp/test.ipxe
        owner: tftp
        group: tftp
        mode: '0644'
        content: |
          #!ipxe
          echo
          echo =====================================
          echo {{ organization.name }}
          echo iPXE Boot Server Test
          echo =====================================
          echo
          echo If you can see this, iPXE is working!
          echo
          echo Network Information:
          echo IP: ${ip}
          echo MAC: ${mac}
          echo Gateway: ${gateway}
          echo DNS: ${dns}
          echo
          echo Press any key to continue...
          prompt
          exit
      tags: [config]
    
    # Firewall configuration
    - name: Configure firewall (UFW)
      community.general.ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
        comment: "{{ item.comment }}"
      loop:
        - { port: '67', proto: 'udp', comment: 'DHCP' }
        - { port: '69', proto: 'udp', comment: 'TFTP' }
        - { port: '80', proto: 'tcp', comment: 'HTTP iPXE' }
        - { port: '8080', proto: 'tcp', comment: 'HTTP Images' }
      when: ansible_facts['os_family'] == "Debian"
      tags: [firewall]
      ignore_errors: yes
    
    # Monitoring and utilities
    - name: Install iPXE status script
      copy:
        dest: /usr/local/bin/ipxe-status
        mode: '0755'
        content: |
          #!/bin/bash
          echo "iPXE Boot Server Status"
          echo "======================="
          echo
          echo "Services:"
          systemctl status dnsmasq --no-pager | grep Active
          systemctl status tftpd-hpa --no-pager | grep Active
          systemctl status nginx --no-pager | grep Active
          echo
          echo "DHCP Leases:"
          if [[ -f /var/lib/misc/dnsmasq.leases ]]; then
              wc -l /var/lib/misc/dnsmasq.leases | awk '{print $1 " active leases"}'
              echo
              echo "Recent leases:"
              tail -5 /var/lib/misc/dnsmasq.leases
          else
              echo "No leases found"
          fi
          echo
          echo "Disk Usage:"
          df -h /srv/tftp /srv/images
      tags: [utilities]
    
    # Log rotation
    - name: Configure log rotation
      copy:
        dest: /etc/logrotate.d/ipxe
        owner: root
        group: root
        mode: '0644'
        content: |
          /var/log/dnsmasq.log {
              daily
              rotate 7
              compress
              delaycompress
              missingok
              notifempty
              create 0640 dnsmasq dnsmasq
              postrotate
                  systemctl reload dnsmasq > /dev/null 2>&1 || true
              endscript
          }
          
          /var/log/nginx/*.log {
              daily
              rotate 14
              compress
              delaycompress
              missingok
              notifempty
              create 0640 www-data adm
              sharedscripts
              postrotate
                  systemctl reload nginx > /dev/null 2>&1 || true
              endscript
          }
      tags: [logrotate]
    
    # Enable and start services
    - name: Enable and start services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - dnsmasq
        - tftpd-hpa
        - nginx
      tags: [services]
    
    # Verification
    - name: Wait for services to be ready
      wait_for:
        port: "{{ item }}"
        timeout: 30
      loop:
        - 67  # DHCP
        - 69  # TFTP
        - 80  # HTTP
      tags: [verify]
    
    - name: Test HTTP health endpoint
      uri:
        url: "http://localhost/health"
        status_code: 200
      register: health_check
      retries: 3
      delay: 5
      tags: [verify]
    
    - name: Display deployment summary
      debug:
        msg:
          - "=========================================="
          - "iPXE Boot Server Deployed Successfully!"
          - "=========================================="
          - ""
          - "Server IP: {{ network.ipxe_server_ip }}"
          - "DHCP Range: {{ network.dhcp_range_start }} - {{ network.dhcp_range_end }}"
          - ""
          - "Next steps:"
          - "1. Copy Windows image to /srv/images/windows11/"
          - "2. Test PXE boot from a client machine"
          - "3. Monitor with: ipxe-status"
          - ""
          - "Logs:"
          - "  DHCP: journalctl -u dnsmasq -f"
          - "  TFTP: journalctl -u tftpd-hpa -f"
          - "  HTTP: tail -f /var/log/nginx/access.log"
  
  handlers:
    - name: restart dnsmasq
      systemd:
        name: dnsmasq
        state: restarted
    
    - name: restart tftpd-hpa
      systemd:
        name: tftpd-hpa
        state: restarted
    
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted