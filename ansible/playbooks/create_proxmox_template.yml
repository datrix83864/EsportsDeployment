---
# Create a Proxmox cloud-init template from an Ubuntu cloud image
# This playbook runs on the Proxmox host (via SSH) and performs the steps
# similar to the helper shell script: download image, import disk, set VM, convert to template.

- name: Create Proxmox cloud-init template
  hosts: all
  gather_facts: false
  become: true

  vars:
    tmp_base: /var/tmp
    memory: 2048
    cores: 2

  tasks:
    - name: Ensure python is present (Ansible remote requirements)
      raw: test -x "$(command -v python3)" || apt-get update && apt-get install -y python3
      changed_when: false

    - name: Fetch next available VMID
      shell: pvesh get /cluster/nextid
      register: nextid

    - name: Set VMID fact
      set_fact:
        vmid: "{{ nextid.stdout | trim }}"

    - name: Prepare temporary directory
      file:
        path: "{{ tmp_base }}/cloudimg-{{ vmid }}"
        state: directory
        mode: "0755"

    - name: Check if cloud image already exists
      stat:
        path: "{{ tmp_base }}/cloudimg-{{ vmid }}/{{ image_url | basename }}"
      register: image_file

    - name: Display download message
      debug:
        msg: |
          Downloading Ubuntu cloud image from {{ image_url }}
          This is a ~700MB file and may take 5-10 minutes depending on your connection.
          Timeout is set to 10 minutes with 3 retry attempts.
      when: not image_file.stat.exists

    - name: Download cloud image (this may take several minutes for ~700MB file)
      get_url:
        url: "{{ image_url }}"
        dest: "{{ tmp_base }}/cloudimg-{{ vmid }}/{{ image_url | basename }}"
        mode: "0644"
        timeout: 600 # 10 minutes timeout for large file download
        force: false # Don't re-download if file exists
      when: not image_file.stat.exists
      register: download_result
      retries: 3 # Retry up to 3 times on failure
      delay: 10 # Wait 10 seconds between retries
      until: download_result is succeeded
      ignore_errors: true

    - name: Fallback to wget if get_url fails
      shell: |
        cd {{ tmp_base }}/cloudimg-{{ vmid }}
        wget -q --show-progress -O "{{ image_url | basename }}" "{{ image_url }}"
      when:
        - not image_file.stat.exists
        - download_result is failed
      register: wget_result

    - name: Download SHA256SUMS for verification
      get_url:
        url: "{{ image_url | regex_replace('/[^/]+$', '/SHA256SUMS') }}"
        dest: "{{ tmp_base }}/cloudimg-{{ vmid }}/SHA256SUMS"
        timeout: 30
      ignore_errors: true
      register: checksum_download

    - name: Verify cloud image checksum
      shell: |
        cd {{ tmp_base }}/cloudimg-{{ vmid }}
        EXPECTED=$(grep "{{ image_url | basename }}" SHA256SUMS | awk '{print $1}')
        ACTUAL=$(sha256sum "{{ image_url | basename }}" | awk '{print $1}')
        if [ "${ACTUAL}" != "${EXPECTED}" ]; then
          echo "CHECKSUM_MISMATCH: Expected ${EXPECTED}, got ${ACTUAL}"
          exit 1
        fi
        echo "Checksum verified successfully"
      when: checksum_download is succeeded
      register: checksum_verify
      failed_when: checksum_verify.stdout is search("CHECKSUM_MISMATCH")

    - name: Validate image file size (should be > 200MB)
      stat:
        path: "{{ tmp_base }}/cloudimg-{{ vmid }}/{{ image_url | basename }}"
      register: image_size

    - name: Check if image file is large enough
      fail:
        msg: "Downloaded image is too small ({{ (image_size.stat.size / 1024 / 1024) | int }}MB). Expected > 200MB. Download may be corrupted."
      when: image_size.stat.size < 209715200

    - name: Create temporary VM
      shell: |
        qm create {{ vmid }} --name temp-import-{{ vmid }} --memory {{ memory }} --cores {{ cores }} || true

    - name: Import disk into storage
      shell: |
        qm importdisk {{ vmid }} {{ tmp_base }}/cloudimg-{{ vmid }}/{{ image_url | basename }} {{ storage }}

    - name: Attach imported disk as scsi0 and configure VM
      shell: |
        qm set {{ vmid }} --scsi0 {{ storage }}:vm-{{ vmid }}-disk-0
        qm set {{ vmid }} --boot order=scsi0
        qm set {{ vmid }} --agent 1

    - name: Convert VM to template
      shell: |
        qm template {{ vmid }}

    - name: Set template name
      shell: |
        qm set {{ vmid }} --name {{ template_name }} || true

    - name: Validate template has boot disk configured
      shell: |
        qm config {{ vmid }} | grep -E '^(scsi0|ide0|sata0):'
      register: boot_disk_check
      failed_when: boot_disk_check.rc != 0

    - name: Display boot disk configuration
      debug:
        msg: "âœ“ Template validated - Boot disk: {{ boot_disk_check.stdout }}"

    - name: Cleanup temporary files
      file:
        path: "{{ tmp_base }}/cloudimg-{{ vmid }}"
        state: absent

    - name: Show completion message
      debug:
        msg: |
          ========================================
          SUCCESS! Template created and validated
          ========================================
          Template Name: {{ template_name }}
          VMID: {{ vmid }}
          Host: {{ inventory_hostname }}
          Boot Disk: {{ boot_disk_check.stdout }}
          ========================================
