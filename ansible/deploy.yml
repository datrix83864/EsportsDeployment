---
# Consolidated Deployment Playbook
# Replaces Terraform + multiple playbooks with single unified approach
#
# Usage:
#   ansible-playbook -i inventory/proxmox deploy.yml -e @../config.yaml

- name: Deploy Esports LAN Infrastructure
  hosts: localhost
  gather_facts: false
  
  vars:
    # Load from config.yaml via -e @config.yaml
    proxmox_host: "{{ proxmox.host }}"
    proxmox_user: "{{ proxmox.user | default('root@pam') }}"
    proxmox_password: "{{ proxmox.password | default('') }}"
    proxmox_api_token_id: "{{ proxmox.api_token_id | default('') }}"
    proxmox_api_token_secret: "{{ proxmox.api_token_secret | default('') }}"
    proxmox_node: "{{ proxmox.node }}"
    proxmox_storage: "{{ proxmox.storage }}"
    cloud_template_name: "ubuntu-cloud"
    cloud_template_vmid: 9000
    cloud_image_url: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64-disk-kvm.img"
    cloud_image_path: "/var/lib/vz/template/iso/ubuntu-22.04-server-cloudimg-amd64-disk-kvm.img"

    # VM definitions
    vms:
      - name: pxe-server
        vmid: 100
        ip: "{{ network.pxe_server }}"
        memory: "{{ resources.pxe_server.memory }}"
        cores: "{{ resources.pxe_server.cores }}"
        disk: "{{ resources.pxe_server.disk }}"
        role: pxe
        
      - name: lancache-server
        vmid: 101
        ip: "{{ network.lancache_server }}"
        memory: "{{ resources.lancache_server.memory }}"
        cores: "{{ resources.lancache_server.cores }}"
        disk: "{{ resources.lancache_server.disk }}"
        extra_disk: "{{ resources.lancache_server.cache_disk }}"
        role: lancache
        
      - name: file-server
        vmid: 102
        ip: "{{ network.file_server }}"
        memory: "{{ resources.file_server.memory }}"
        cores: "{{ resources.file_server.cores }}"
        disk: "{{ resources.file_server.disk }}"
        extra_disk: "{{ resources.file_server.data_disk }}"
        role: fileserver
  
  tasks:
    - name: Display deployment information
      debug:
        msg:
          - "╔═══════════════════════════════════════════════════════╗"
          - "║  Deploying {{ organization.name }} Infrastructure"
          - "╚═══════════════════════════════════════════════════════╝"
          - ""
          - "Proxmox: {{ proxmox_host }} ({{ proxmox_node }})"
          - "Network: {{ network.subnet }}"
          - ""
          - "Creating 3 VMs:"
          - "  • PXE Server:   {{ network.pxe_server }}"
          - "  • LANCache:     {{ network.lancache_server }}"
          - "  • File Server:  {{ network.file_server }}"
          - ""
          - "This will take 15-20 minutes..."
          - ""

    # Phase 0: Ensure Ubuntu Cloud Template Exists
    - name: Check if ubuntu-cloud template exists
      stat:
        path: "/etc/pve/qemu-server/{{ cloud_template_vmid }}.conf"
      register: ubuntu_template

    - name: Download Ubuntu 22.04 cloud image
      get_url:
        url: "{{ cloud_image_url }}"
        dest: "{{ cloud_image_path }}"
        mode: '0644'
      when: not ubuntu_template.stat.exists

    - name: Create Ubuntu Cloud Template if missing
      shell: |
        set -e
        qm create {{ cloud_template_vmid }} --name {{ cloud_template_name }} --memory 2048 --cores 2 --net0 virtio,bridge={{ advanced.network_bridge | default('vmbr0') }}
        qm importdisk {{ cloud_template_vmid }} {{ cloud_image_path }} {{ proxmox_storage }}
        qm set {{ cloud_template_vmid }} --scsihw virtio-scsi-pci --scsi0 {{ proxmox_storage }}:vm-{{ cloud_template_vmid }}-disk-0
        qm set {{ cloud_template_vmid }} --ide2 {{ proxmox_storage }}:cloudinit
        qm set {{ cloud_template_vmid }} --boot c --bootdisk scsi0
        qm set {{ cloud_template_vmid }} --serial0 socket --vga serial0
        qm set {{ cloud_template_vmid }} --agent enabled=1
        qm template {{ cloud_template_vmid }}
      args:
        creates: "/etc/pve/qemu-server/{{ cloud_template_vmid }}.conf"
      when: not ubuntu_template.stat.exists

    - name: Wait a few seconds for Proxmox to register template
      pause:
        seconds: 5
      when: not ubuntu_template.stat.exists
    
    # Phase 1: Create VMs in Proxmox
    - name: Create VMs in Proxmox
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password | default(omit) }}"
        api_token_id: "{{ proxmox_api_token_id | default(omit) }}"
        api_token_secret: "{{ proxmox_api_token_secret | default(omit) }}"
        node: "{{ proxmox_node }}"
        vmid: "{{ item.vmid }}"
        clone: "{{ cloud_template_name }}"
        full: yes
        name: "{{ item.name }}"
        memory: "{{ item.memory }}"
        cores: "{{ item.cores }}"
        net:
          net0: "virtio,bridge={{ advanced.network_bridge | default('vmbr0') }}"
        virtio:
          virtio0: "{{ proxmox_storage }}:{{ item.disk }},format=raw"
        ostype: l26  # Linux 2.6+
        agent: 1
        onboot: yes
        state: present
      loop: "{{ vms }}"
      register: vm_creation
      async: 600
      poll: 0
    
    - name: Wait for VM creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: vm_jobs
      until: vm_jobs.finished
      retries: 60
      delay: 10
      loop: "{{ vm_creation.results }}"
    
    - name: Add extra data disks to VMs that need them
      community.general.proxmox_disk:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password | default(omit) }}"
        api_token_id: "{{ proxmox_api_token_id | default(omit) }}"
        api_token_secret: "{{ proxmox_api_token_secret | default(omit) }}"
        vmid: "{{ item.vmid }}"
        disk: virtio1
        storage: "{{ proxmox_storage }}"
        size: "{{ item.extra_disk }}"
      loop: "{{ vms }}"
      when: item.extra_disk is defined
    
    - name: Start VMs
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password | default(omit) }}"
        api_token_id: "{{ proxmox_api_token_id | default(omit) }}"
        api_token_secret: "{{ proxmox_api_token_secret | default(omit) }}"
        node: "{{ proxmox_node }}"
        vmid: "{{ item.vmid }}"
        state: started
      loop: "{{ vms }}"
    
    - name: Wait for VMs to be accessible via SSH
      wait_for:
        host: "{{ item.ip }}"
        port: 22
        timeout: 300
        delay: 30
      loop: "{{ vms }}"
    
    - name: Build dynamic inventory for next plays
      add_host:
        name: "{{ item.ip }}"
        groups: "{{ item.role }}"
        ansible_user: ansible
        ansible_become: yes
      loop: "{{ vms }}"
      changed_when: false

# Phase 2: Configure PXE Server
- name: Configure PXE/DHCP Server
  hosts: pxe
  become: yes
  
  roles:
    - role: pxe
      vars:
        org_name: "{{ organization.name }}"
        network_config: "{{ network }}"

# Phase 3: Configure LANCache Server
- name: Configure LANCache Server
  hosts: lancache
  become: yes
  
  roles:
    - role: lancache
      vars:
        org_name: "{{ organization.name }}"
        network_config: "{{ network }}"
        games_config: "{{ games }}"

# Phase 4: Configure File Server
- name: Configure File Server
  hosts: fileserver
  become: yes
  
  roles:
    - role: fileserver
      vars:
        org_name: "{{ organization.name }}"
        network_config: "{{ network }}"
        profile_config: "{{ profiles }}"
        users_config: "{{ users | default([]) }}"

# Phase 5: Verification
- name: Verify Deployment
  hosts: localhost
  gather_facts: false
  
  tasks:
    - name: Test PXE server
      uri:
        url: "http://{{ network.pxe_server }}/health"
        status_code: 200
      register: pxe_health
      failed_when: false
    
    - name: Test LANCache
      uri:
        url: "http://{{ network.lancache_server }}:8080"
        status_code: 200
      register: cache_health
      failed_when: false
    
    - name: Test File Server SMB
      command: smbclient -L {{ network.file_server }} -N
      register: smb_test
      failed_when: false
      changed_when: false
    
    - name: Display verification results
      debug:
        msg:
          - "═══════════════════════════════════════════"
          - "Verification Results"
          - "═══════════════════════════════════════════"
          - ""
          - "PXE Server:   {{ 'OK' if pxe_health.status == 200 else 'FAILED' }}"
          - "LANCache:     {{ 'OK' if cache_health.status == 200 else 'FAILED' }}"
          - "File Server:  {{ 'OK' if smb_test.rc == 0 else 'FAILED' }}"
          - ""
          - "{{ '✓ All services are operational!' if (pxe_health.status == 200 and cache_health.status == 200 and smb_test.rc == 0) else '✗ Some services failed - check logs above' }}"