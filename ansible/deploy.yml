---
# Consolidated Deployment Playbook
# Replaces Terraform + multiple playbooks with single unified approach
#
# Usage:
#   ansible-playbook -i inventory/proxmox deploy.yml -e @../config.yaml

- name: Deploy Esports LAN Infrastructure
  hosts: localhost
  gather_facts: false
  
  vars:
    # Load from config.yaml via -e @config.yaml
    proxmox_host: "{{ proxmox.host }}"
    proxmox_user: "{{ proxmox.user | default('root@pam') }}"
    proxmox_password: "{{ proxmox.password | default('') }}"
    proxmox_api_token_id: "{{ proxmox.api_token_id | default('') }}"
    proxmox_api_token_secret: "{{ proxmox.api_token_secret | default('') }}"
    proxmox_node: "{{ proxmox.node }}"
    proxmox_storage: "{{ proxmox.storage }}"
    
    # VM definitions
    vms:
      - name: pxe-server
        vmid: 100
        ip: "{{ network.pxe_server }}"
        memory: "{{ resources.pxe_server.memory }}"
        cores: "{{ resources.pxe_server.cores }}"
        disk: "{{ resources.pxe_server.disk }}"
        role: pxe
        
      - name: lancache-server
        vmid: 101
        ip: "{{ network.lancache_server }}"
        memory: "{{ resources.lancache_server.memory }}"
        cores: "{{ resources.lancache_server.cores }}"
        disk: "{{ resources.lancache_server.disk }}"
        extra_disk: "{{ resources.lancache_server.cache_disk }}"
        role: lancache
        
      - name: file-server
        vmid: 102
        ip: "{{ network.file_server }}"
        memory: "{{ resources.file_server.memory }}"
        cores: "{{ resources.file_server.cores }}"
        disk: "{{ resources.file_server.disk }}"
        extra_disk: "{{ resources.file_server.data_disk }}"
        role: fileserver
  
  tasks:
    - name: Display deployment information
      debug:
        msg:
          - "╔═══════════════════════════════════════════════════════╗"
          - "║  Deploying {{ organization.name }} Infrastructure"
          - "╚═══════════════════════════════════════════════════════╝"
          - ""
          - "Proxmox: {{ proxmox_host }} ({{ proxmox_node }})"
          - "Network: {{ network.subnet }}"
          - ""
          - "Creating 3 VMs:"
          - "  • PXE Server:   {{ network.pxe_server }}"
          - "  • LANCache:     {{ network.lancache_server }}"
          - "  • File Server:  {{ network.file_server }}"
          - ""
          - "This will take 15-20 minutes..."
          - ""

        # Phase 0: Ensure Ubuntu Cloud Template Exists
    - name: Check if Ubuntu cloud template exists
      community.proxmox.proxmox_vm_info:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password | default(omit) }}"
        api_token_id: "{{ proxmox_api_token_id | default(omit) }}"
        api_token_secret: "{{ proxmox_api_token_secret | default(omit) }}"
        node: "{{ proxmox_node }}"
      register: proxmox_info

    - name: Download Ubuntu 22.04 cloud image
      get_url:
        url: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
        dest: /tmp/jammy-server-cloudimg-amd64.img
        mode: '0644'
      when: "'ubuntu-cloud' not in (proxmox_info.vms | map(attribute='name') | list)"

    - name: Create Ubuntu Cloud Template if missing
      ansible.builtin.shell: |
        set -e
        qm create 9000 --name ubuntu-cloud --memory 2048 --cores 2 --net0 virtio,bridge={{ advanced.network_bridge | default('vmbr0') }}
        qm importdisk 9000 /tmp/jammy-server-cloudimg-amd64.img {{ proxmox_storage }}
        qm set 9000 --scsihw virtio-scsi-pci --scsi0 {{ proxmox_storage }}:vm-9000-disk-0
        qm set 9000 --ide2 {{ proxmox_storage }}:cloudinit
        qm set 9000 --boot c --bootdisk scsi0
        qm set 9000 --serial0 socket --vga serial0
        qm set 9000 --agent enabled=1
        qm template 9000
      args:
        creates: /etc/pve/qemu-server/9000.conf
      when: "'ubuntu-cloud' not in (proxmox_info.vms | map(attribute='name') | list)"
    
    # Phase 1: Create VMs in Proxmox
    - name: Clone Ubuntu Cloud Template to Create VMs
      community.proxmox.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password | default(omit) }}"
        api_token_id: "{{ proxmox_api_token_id | default(omit) }}"
        api_token_secret: "{{ proxmox_api_token_secret | default(omit) }}"
        node: "{{ proxmox_node }}"
        clone: "ubuntu-cloud"
        full: yes
        vmid: "{{ item.vmid }}"
        name: "{{ item.name }}"
        storage: "{{ proxmox_storage }}"
        memory: "{{ item.memory }}"
        cores: "{{ item.cores }}"
        net:
          net0: "virtio,bridge={{ advanced.network_bridge | default('vmbr0') }}"
        scsi:
          scsi0: "{{ proxmox_storage }}:{{ item.disk }}"
        boot: "order=scsi0;net0"
        agent: 1
        onboot: yes
        state: present
      loop: "{{ vms }}"
      register: vm_creation

    
    - name: Wait for VM creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: vm_jobs
      until: vm_jobs.finished
      retries: 60
      delay: 10
      loop: "{{ vm_creation.results }}"
    
    - name: Add extra data disks to VMs that need them
      community.proxmox.proxmox_disk:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password | default(omit) }}"
        api_token_id: "{{ proxmox_api_token_id | default(omit) }}"
        api_token_secret: "{{ proxmox_api_token_secret | default(omit) }}"
        vmid: "{{ item.vmid }}"
        disk: virtio1
        storage: "{{ proxmox_storage }}"
        size: "{{ item.extra_disk }}"
      loop: "{{ vms }}"
      when: item.extra_disk is defined

    - name: Configure cloud-init for cloned VMs
      community.proxmox.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password | default(omit) }}"
        api_token_id: "{{ proxmox_api_token_id | default(omit) }}"
        api_token_secret: "{{ proxmox_api_token_secret | default(omit) }}"
        node: "{{ proxmox_node }}"
        vmid: "{{ item.vmid }}"
        ciuser: ansible
        cipassword: "{{ default_vm_password | default('changeme') }}"
        ipconfig:
          ipconfig0: "ip={{ item.ip }}/24,gw={{ network.gateway }}"
        sshkeys: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      loop: "{{ vms }}"

    
    - name: Start VMs
      community.proxmox.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password | default(omit) }}"
        api_token_id: "{{ proxmox_api_token_id | default(omit) }}"
        api_token_secret: "{{ proxmox_api_token_secret | default(omit) }}"
        node: "{{ proxmox_node }}"
        vmid: "{{ item.vmid }}"
        state: started
      loop: "{{ vms }}"
    
    - name: Wait for VMs to be accessible via SSH
      wait_for:
        host: "{{ item.ip }}"
        port: 22
        timeout: 300
        delay: 30
      loop: "{{ vms }}"
    
    - name: Build dynamic inventory for next plays
      add_host:
        name: "{{ item.ip }}"
        groups: "{{ item.role }}"
        ansible_user: ansible
        ansible_become: yes
      loop: "{{ vms }}"
      changed_when: false

# Phase 2: Configure PXE Server
- name: Configure PXE/DHCP Server
  hosts: pxe
  become: yes
  
  roles:
    - role: pxe
      vars:
        org_name: "{{ organization.name }}"
        network_config: "{{ network }}"

# Phase 3: Configure LANCache Server
- name: Configure LANCache Server
  hosts: lancache
  become: yes
  
  roles:
    - role: lancache
      vars:
        org_name: "{{ organization.name }}"
        network_config: "{{ network }}"
        games_config: "{{ games }}"

# Phase 4: Configure File Server
- name: Configure File Server
  hosts: fileserver
  become: yes
  
  roles:
    - role: fileserver
      vars:
        org_name: "{{ organization.name }}"
        network_config: "{{ network }}"
        profile_config: "{{ profiles }}"
        users_config: "{{ users | default([]) }}"

# Phase 5: Verification
- name: Verify Deployment
  hosts: localhost
  gather_facts: false
  
  tasks:
    - name: Test PXE server
      uri:
        url: "http://{{ network.pxe_server }}/health"
        status_code: 200
      register: pxe_health
      failed_when: false
    
    - name: Test LANCache
      uri:
        url: "http://{{ network.lancache_server }}:8080"
        status_code: 200
      register: cache_health
      failed_when: false
    
    - name: Test File Server SMB
      command: smbclient -L {{ network.file_server }} -N
      register: smb_test
      failed_when: false
      changed_when: false
    
    - name: Display verification results
      debug:
        msg:
          - "═══════════════════════════════════════════"
          - "Verification Results"
          - "═══════════════════════════════════════════"
          - ""
          - "PXE Server:   {{ 'OK' if pxe_health.status == 200 else 'FAILED' }}"
          - "LANCache:     {{ 'OK' if cache_health.status == 200 else 'FAILED' }}"
          - "File Server:  {{ 'OK' if smb_test.rc == 0 else 'FAILED' }}"
          - ""
          - "{{ '✓ All services are operational!' if (pxe_health.status == 200 and cache_health.status == 200 and smb_test.rc == 0) else '✗ Some services failed - check logs above' }}"