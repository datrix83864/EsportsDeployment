---
# Consolidated Deployment Playbook - FIXED VERSION
# Addresses cloud-init and network configuration issues
#
# Usage:
#   ansible-playbook -i inventory/proxmox deploy.yml -e @../config.yaml

- name: Deploy Esports LAN Infrastructure
  hosts: localhost
  gather_facts: false
  
  vars:
    # Load from config.yaml via -e @config.yaml
    proxmox_host: "{{ proxmox.host }}"
    proxmox_user: "{{ proxmox.user | default('root@pam') }}"
    proxmox_password: "{{ proxmox.password | default('') }}"
    proxmox_api_token_id: "{{ proxmox.api_token_id | default('') }}"
    proxmox_api_token_secret: "{{ proxmox.api_token_secret | default('') }}"
    proxmox_node: "{{ proxmox.node }}"
    proxmox_storage: "{{ proxmox.storage }}"
    cloud_template_name: "ubuntu-cloud"
    cloud_template_vmid: 105
    cloud_image_url: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
    cloud_image_path: /tmp/jammy-server-cloudimg-amd64.img
    network: "{{ network }}"
    ssh_public_key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/id_rsa.pub') }}"
    
    # VM definitions
    vms:
      - name: pxe-server
        vmid: 100
        ip: "{{ network.pxe_server }}"
        memory: "{{ resources.pxe_server.memory }}"
        cores: "{{ resources.pxe_server.cores }}"
        disk: "{{ resources.pxe_server.disk }}"
        role: pxe
        
      - name: lancache-server
        vmid: 101
        ip: "{{ network.lancache_server }}"
        memory: "{{ resources.lancache_server.memory }}"
        cores: "{{ resources.lancache_server.cores }}"
        disk: "{{ resources.lancache_server.disk }}"
        extra_disk: "{{ resources.lancache_server.cache_disk }}"
        role: lancache
        
      - name: file-server
        vmid: 102
        ip: "{{ network.file_server }}"
        memory: "{{ resources.file_server.memory }}"
        cores: "{{ resources.file_server.cores }}"
        disk: "{{ resources.file_server.disk }}"
        extra_disk: "{{ resources.file_server.data_disk }}"
        role: fileserver
  
  pre_tasks:
    - name: Verify SSH key exists
      stat:
        path: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
      register: ssh_key_check
      failed_when: not ssh_key_check.stat.exists
      
    - name: Display SSH key status
      debug:
        msg: "SSH key found: {{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"

  tasks:
    - name: Display deployment information
      debug:
        msg:
          - "╔═══════════════════════════════════════════════════════╗"
          - "║  Deploying {{ organization.name }} Infrastructure"
          - "╚═══════════════════════════════════════════════════════╝"
          - ""
          - "Proxmox: {{ proxmox_host }} ({{ proxmox_node }})"
          - "Network: {{ network.subnet }}"
          - ""
          - "Creating 3 VMs:"
          - "  • PXE Server:   {{ network.pxe_server }}"
          - "  • LANCache:     {{ network.lancache_server }}"
          - "  • File Server:  {{ network.file_server }}"
          - ""
          - "This will take 15-20 minutes..."
          - ""

    # Phase 0: Ensure Ubuntu Cloud Template Exists
    - name: Check if ubuntu-cloud template exists
      delegate_to: "{{ proxmox_host }}"
      stat:
        path: "/etc/pve/qemu-server/{{ cloud_template_vmid }}.conf"
      register: ubuntu_template

    - name: Download Ubuntu 22.04 cloud image
      delegate_to: "{{ proxmox_host }}"
      get_url:
        url: "{{ cloud_image_url }}"
        dest: "{{ cloud_image_path }}"
        mode: '0644'
      when: not ubuntu_template.stat.exists

    - name: Create Ubuntu Cloud Template if missing
      delegate_to: "{{ proxmox_host }}"
      shell: |
        set -e
        qm create {{ cloud_template_vmid }} --name {{ cloud_template_name }} --memory 2048 --cores 2 --net0 virtio,bridge={{ advanced.network_bridge | default('vmbr0') }}
        qm importdisk {{ cloud_template_vmid }} {{ cloud_image_path }} {{ proxmox_storage }}
        qm set {{ cloud_template_vmid }} --scsihw virtio-scsi-pci --scsi0 {{ proxmox_storage }}:vm-{{ cloud_template_vmid }}-disk-0
        qm set {{ cloud_template_vmid }} --ide2 {{ proxmox_storage }}:cloudinit
        qm set {{ cloud_template_vmid }} --boot c --bootdisk scsi0
        qm set {{ cloud_template_vmid }} --serial0 socket --vga serial0
        qm set {{ cloud_template_vmid }} --agent enabled=1
        qm template {{ cloud_template_vmid }}
      args:
        creates: "/etc/pve/qemu-server/{{ cloud_template_vmid }}.conf"
      when: not ubuntu_template.stat.exists

    - name: Wait for Proxmox to register template
      pause:
        seconds: 5
      when: not ubuntu_template.stat.exists
    
    # Phase 1: Create VMs with proper cloud-init configuration
    - name: Clone VMs from template
      delegate_to: "{{ proxmox_host }}"
      shell: |
        qm clone {{ cloud_template_vmid }} {{ item.vmid }} --name {{ item.name }} --full
      loop: "{{ vms }}"
      register: clone_result
      failed_when: false

    - name: Configure VM resources and cloud-init
      delegate_to: "{{ proxmox_host }}"
      shell: |
        # Set CPU and Memory
        qm set {{ item.vmid }} --cores {{ item.cores }} --memory {{ item.memory }}
        
        # Resize boot disk
        qm resize {{ item.vmid }} scsi0 {{ item.disk }}G
        
        # Configure cloud-init with static IP
        qm set {{ item.vmid }} --ipconfig0 "ip={{ item.ip }}/24,gw={{ network.gateway }}"
        
        # Set nameservers
        qm set {{ item.vmid }} --nameserver "8.8.8.8 8.8.4.4"
        
        # Set cloud-init user
        qm set {{ item.vmid }} --ciuser ansible
        qm set {{ item.vmid }} --cipassword changeme

        # Add SSH public key
        qm set {{ item.vmid }} --sshkey "{{ ssh_public_key | replace('\n', '') }}"
        
        # Enable start on boot
        qm set {{ item.vmid }} --onboot 1
        
        # Enable QEMU guest agent
        qm set {{ item.vmid }} --agent enabled=1,fstrim_cloned_disks=1
      loop: "{{ vms }}"
    
    - name: Add extra data disks to VMs that need them
      delegate_to: "{{ proxmox_host }}"
      shell: |
        qm set {{ item.vmid }} --scsi1 {{ proxmox_storage }}:{{ item.extra_disk }}
      loop: "{{ vms }}"
      when: item.extra_disk is defined
    
    - name: Start VMs
      delegate_to: "{{ proxmox_host }}"
      shell: |
        qm start {{ item.vmid }}
      loop: "{{ vms }}"
    
    - name: Wait for cloud-init to complete (this takes 10 minutes)
      pause:
        minutes: 10
        prompt: "Waiting for cloud-init to configure VMs and install QEMU guest agent..."
    
    - name: Check VM status and IP addresses
      delegate_to: "{{ proxmox_host }}"
      shell: |
        qm guest cmd {{ item.vmid }} network-get-interfaces 2>/dev/null || echo "Guest agent not ready"
      loop: "{{ vms }}"
      register: vm_network_check
      failed_when: false
    
    - name: Display network check results
      debug:
        msg: "{{ vm_network_check.results }}"
    
    # Clean up old SSH keys (prevents "host key changed" errors)
    - name: Remove old SSH host keys for all VMs
      command: ssh-keygen -f "/root/.ssh/known_hosts" -R "{{ item.ip }}"
      loop: "{{ vms }}"
      delegate_to: localhost
      changed_when: false
      failed_when: false
      tags: [ssh, cleanup]
    
    # Wait for SSH to be ready
    - name: Wait for SSH to become available
      wait_for:
        host: "{{ item.ip }}"
        port: 22
        delay: 10
        timeout: 300
        state: started
      loop: "{{ vms }}"
      delegate_to: localhost
      tags: [ssh, verify]
    
    # # Verify SSH connectivity with auto-accept new keys
    # - name: Verify SSH connectivity
    #   command: >
    #     ssh -o StrictHostKeyChecking=accept-new 
    #     -o ConnectTimeout=10 
    #     -o UserKnownHostsFile=/root/.ssh/known_hosts 
    #     ansible@{{ item.ip }} 
    #     "echo 'Connected to {{ item.name }}'"
    #   loop: "{{ vms }}"
    #   register: ssh_wait
    #   retries: 3
    #   delay: 10
    #   until: ssh_wait.rc == 0
    #   changed_when: false
    #   delegate_to: localhost
    #   tags: [ssh, verify]
    
    - name: Install and start QEMU guest agent if not running
      shell: |
        ssh -o StrictHostKeyChecking=no ansible@{{ item.ip }} "sudo apt-get update && sudo apt-get install -y qemu-guest-agent && sudo systemctl enable --now qemu-guest-agent"
      loop: "{{ vms }}"
      ignore_errors: true
    
    - name: Build dynamic inventory for next plays
      add_host:
        name: "{{ item.ip }}"
        groups: "{{ item.role }}"
        ansible_user: ansible
        ansible_become: yes
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      loop: "{{ vms }}"
      changed_when: false

# Phase 2: Configure PXE Server
- name: Configure PXE/DHCP Server
  hosts: pxe
  become: yes
  gather_facts: yes
  
  roles:
    - role: pxe
      vars:
        org_name: "{{ organization.name }}"
        network_config: "{{ network }}"

# Phase 3: Configure LANCache Server
- name: Configure LANCache Server
  hosts: lancache
  become: yes
  gather_facts: yes
  
  roles:
    - role: lancache
      vars:
        org_name: "{{ organization.name }}"
        network_config: "{{ network }}"
        games_config: "{{ games }}"

# Phase 4: Configure File Server
- name: Configure File Server
  hosts: fileserver
  become: yes
  gather_facts: yes
  
  roles:
    - role: fileserver
      vars:
        org_name: "{{ organization.name }}"
        network_config: "{{ network }}"
        profile_config: "{{ profiles }}"
        users_config: "{{ users | default([]) }}"

# Phase 5: Verification
- name: Verify Deployment
  hosts: localhost
  gather_facts: false
  
  tasks:
    - name: Final connectivity test
      wait_for:
        host: "{{ item }}"
        port: 22
        timeout: 30
      loop:
        - "{{ network.pxe_server }}"
        - "{{ network.lancache_server }}"
        - "{{ network.file_server }}"
    
    - name: Display verification results
      debug:
        msg:
          - "═══════════════════════════════════════════"
          - "Deployment Complete!"
          - "═══════════════════════════════════════════"
          - ""
          - "All VMs are up and accessible via SSH"
          - ""
          - "Next steps:"
          - "  1. Check service status on each VM"
          - "  2. Test PXE boot from a client"
          - "  3. Configure user accounts on file server"
          - ""