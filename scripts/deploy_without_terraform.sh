#!/bin/bash
#
# Deploy iPXE Server WITHOUT Terraform
# For when Terraform is being difficult
#
# This script deploys just using Ansible
# You create the VM manually in Proxmox first
#
# Usage:
#   ./deploy_without_terraform.sh
#

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
CONFIG_FILE="$PROJECT_ROOT/config.yaml"

cat << "EOF"
╔═══════════════════════════════════════════════════════╗
║  Deploy iPXE Server (No Terraform Required!)         ║
╚═══════════════════════════════════════════════════════╝

This script helps you deploy without Terraform.
You'll need to create the VM in Proxmox first.

EOF

# Check if Ansible is installed
if ! command -v ansible &> /dev/null; then
    log_error "Ansible is not installed!"
    echo ""
    echo "Install with:"
    echo "  sudo apt install ansible"
    echo "or run:"
    echo "  sudo ./scripts/install_prerequisites.sh"
    exit 1
fi

log_success "Ansible is installed: $(ansible --version | head -1)"

# Check config file
if [[ ! -f "$CONFIG_FILE" ]]; then
    log_error "config.yaml not found!"
    echo ""
    echo "Copy and edit the example config:"
    echo "  cp config.example.yaml config.yaml"
    echo "  nano config.yaml"
    exit 1
fi

log_success "config.yaml found"

# Get iPXE server IP from config
IPXE_IP=$(python3 -c "import yaml; print(yaml.safe_load(open('$CONFIG_FILE'))['network']['ipxe_server_ip'])" 2>/dev/null || echo "")

if [[ -z "$IPXE_IP" ]]; then
    log_error "Could not read iPXE server IP from config.yaml"
    exit 1
fi

log_info "iPXE Server IP from config: $IPXE_IP"

echo ""
log_warning "MANUAL STEP REQUIRED: Create VM in Proxmox"
echo ""
echo "In Proxmox web UI (https://proxmox:8006):"
echo "  1. Click 'Create VM'"
echo "  2. VM ID: (any available, e.g., 100)"
echo "  3. Name: ipxe-server"
echo "  4. OS: Ubuntu 22.04 (or Debian 12)"
echo "  5. System: Default settings"
echo "  6. Disks: 32GB minimum"
echo "  7. CPU: 2 cores"
echo "  8. Memory: 2048MB (2GB)"
echo "  9. Network: Bridge=vmbr0"
echo "  10. Confirm and create"
echo ""
echo "Then:"
echo "  11. Start the VM"
echo "  12. Install Ubuntu/Debian"
echo "  13. Set IP address to: $IPXE_IP"
echo "  14. Install SSH server: sudo apt install openssh-server"
echo "  15. Create user 'ansible' with sudo access:"
echo "      sudo adduser ansible"
echo "      sudo usermod -aG sudo ansible"
echo ""

read -p "Have you created the VM and it's accessible at $IPXE_IP? (yes/no): " -r
if [[ $REPLY != "yes" ]]; then
    log_info "Come back when the VM is ready!"
    exit 0
fi

# Test SSH connection
log_info "Testing SSH connection to $IPXE_IP..."

if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no ansible@$IPXE_IP "echo 'Connected'" &> /dev/null; then
    log_success "SSH connection successful!"
else
    log_error "Cannot connect via SSH to ansible@$IPXE_IP"
    echo ""
    echo "Troubleshooting:"
    echo "  1. Is the VM running?"
    echo "  2. Can you ping it? ping $IPXE_IP"
    echo "  3. Is SSH installed? sudo apt install openssh-server"
    echo "  4. Is the user 'ansible' created?"
    echo "  5. Try manual SSH: ssh ansible@$IPXE_IP"
    echo ""
    echo "If you can't SSH, set up SSH keys:"
    echo "  ssh-keygen"
    echo "  ssh-copy-id ansible@$IPXE_IP"
    exit 1
fi

# Create Ansible inventory
log_info "Creating Ansible inventory..."

mkdir -p "$PROJECT_ROOT/ansible/inventory"

cat > "$PROJECT_ROOT/ansible/inventory/hosts" << EOF
# Ansible Inventory
# Generated by deploy_without_terraform.sh

[ipxe_server]
$IPXE_IP ansible_user=ansible ansible_become=yes

[lancache_server]
# Add when ready

[file_server]
# Add when ready

[all:vars]
ansible_python_interpreter=/usr/bin/python3
EOF

log_success "Inventory created at ansible/inventory/hosts"

# Test Ansible connectivity
log_info "Testing Ansible connectivity..."

cd "$PROJECT_ROOT/ansible"

if ansible ipxe_server -i inventory/hosts -m ping; then
    log_success "Ansible can connect to iPXE server!"
else
    log_error "Ansible cannot connect"
    echo ""
    echo "Try:"
    echo "  ansible ipxe_server -i inventory/hosts -m ping -vvv"
    exit 1
fi

# Run Ansible playbook
echo ""
log_info "Ready to deploy iPXE server with Ansible"
read -p "Proceed with deployment? (yes/no): " -r

if [[ $REPLY != "yes" ]]; then
    log_info "Cancelled. You can run deployment later with:"
    echo "  cd ansible"
    echo "  ansible-playbook -i inventory/hosts playbooks/deploy_ipxe.yml"
    exit 0
fi

log_info "Deploying iPXE server (this takes 10-15 minutes)..."

ansible-playbook -i inventory/hosts playbooks/deploy_ipxe.yml -e "@$CONFIG_FILE"

if [[ $? -eq 0 ]]; then
    log_success "iPXE server deployed successfully!"
    echo ""
    echo "Next steps:"
    echo "  1. Test: ssh ansible@$IPXE_IP 'ipxe-status'"
    echo "  2. Configure a client to PXE boot"
    echo "  3. Test boot from network"
    echo ""
    echo "To deploy other components:"
    echo "  - Create VMs for LANCache and File Server"
    echo "  - Add their IPs to ansible/inventory/hosts"
    echo "  - Run: ansible-playbook playbooks/deploy_lancache.yml"
    echo "  - Run: ansible-playbook playbooks/deploy_fileserver.yml"
else
    log_error "Deployment failed. Check the output above for errors."
    exit 1
fi