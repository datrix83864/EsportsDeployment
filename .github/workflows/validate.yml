name: Validate Configuration and Code

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  validate-yaml:
    name: Validate YAML Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml jsonschema
        
    - name: Validate config.example.yaml syntax
      run: |
        python -c "import yaml; yaml.safe_load(open('config.example.yaml'))"
        
    - name: Validate against schema
      run: |
        if [ -f scripts/validate_config.py ]; then
          python scripts/validate_config.py config.example.yaml
        else
          echo "Schema validation script not yet implemented"
        fi
        
    - name: Check for config.yaml in commits
      run: |
        if git ls-files | grep -q "^config.yaml$"; then
          echo "ERROR: config.yaml should not be committed (contains sensitive info)"
          echo "Please remove config.yaml and add it to .gitignore"
          exit 1
        else
          echo "OK: config.yaml not found in repository"
        fi

  validate-scripts:
    name: Validate Shell Scripts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install ShellCheck
      run: sudo apt-get install -y shellcheck
      
    - name: Run ShellCheck on all scripts
      run: |
        find . -type f -name "*.sh" | while read script; do
          echo "Checking $script"
          shellcheck "$script" || exit 1
        done

  validate-ansible:
    name: Validate Ansible Playbooks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible ansible-lint
        
    - name: Run ansible-lint
      run: |
        if [ -d ansible ]; then
          cd ansible
          ansible-lint || true  # Don't fail on warnings for now
        else
          echo "Ansible directory not yet created"
        fi
        
    - name: Validate playbook syntax
      run: |
        if [ -d ansible ]; then
          find ansible -name "*.yml" -o -name "*.yaml" | while read playbook; do
            echo "Validating $playbook"
            ansible-playbook --syntax-check "$playbook" || exit 1
          done
        fi

  validate-terraform:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Terraform fmt check
      if: hashFiles('terraform/**/*.tf') != ''
      run: |
        cd terraform
        terraform fmt -check -recursive
        
    - name: Terraform init
      if: hashFiles('terraform/**/*.tf') != ''
      run: |
        cd terraform
        terraform init -backend=false
        
    - name: Terraform validate
      if: hashFiles('terraform/**/*.tf') != ''
      run: |
        cd terraform
        terraform validate

  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for broken links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
        
    - name: Validate Markdown syntax
      run: |
        npm install -g markdownlint-cli
        markdownlint '**/*.md' --ignore node_modules --ignore .git

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  test-documentation-build:
    name: Test Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install MkDocs (if we use it later)
      run: |
        pip install mkdocs mkdocs-material
        
    - name: Test documentation build
      run: |
        if [ -f mkdocs.yml ]; then
          mkdocs build --strict
        else
          echo "MkDocs not yet configured"
        fi

  lint-powershell:
    name: Lint PowerShell Scripts
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install PSScriptAnalyzer
      shell: powershell
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        
    - name: Run PSScriptAnalyzer
      shell: powershell
      run: |
        $scripts = Get-ChildItem -Path . -Filter *.ps1 -Recurse
        foreach ($script in $scripts) {
          Write-Host "Analyzing $($script.FullName)"
          Invoke-ScriptAnalyzer -Path $script.FullName -Severity Error
        }

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-yaml, validate-scripts, validate-ansible, validate-terraform, validate-documentation, security-scan, lint-powershell]
    if: always()
    
    steps:
    - name: Check validation results
      run: |
        echo "All validation checks completed"
        echo "Review the results above for any failures"